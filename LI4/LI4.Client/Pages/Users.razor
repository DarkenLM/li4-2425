@page "/users"
@* @rendermode InteractiveWebAssembly *@
@rendermode InteractiveServer
@inject UtilizadorDAO UtilizadorDAO
@inject IJSRuntime js

@using Util;

<h3>User Management</h3>

<!-- Add User Section -->
<div>
    <h4>Add New User</h4>
    <form @onsubmit="AddUser">
        <div>
            <label for="username">Username:</label>
            <input id="username" type="text" @bind="newUser.username" />
        </div>
        <div>
            <label for="email">Email:</label>
            <input id="email" type="email" @bind="newUser.email" />
        </div>
        <div>
            <label for="palavraPasse">Palavra-Passe:</label>
            <input id="palavraPasse" type="palavraPasse" @bind="newUser.palavraPasse" />
        </div>
        <button type="submit">Add User</button>
    </form>
</div>

<p style="color: red; display: @(error is not null ? "block" : "none")" id="error">@error</p>

<hr />

<!-- Display Users -->
<div>
    <h4>Users</h4>
    @if (users != null && users.Any()) {
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Palavra-Passe</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.id</td>
                        <td>
                            @if (editUserId == user.id) {
                                <input @bind = "user.username" />
                            } else {
                                @user.username
                            }
                        </td>
                        <td>
                            @if (editUserId == user.id) {
                                <input @bind = "user.email" />
                            } else {
                                @user.email
                            }
                        </td>
                        <td>
                            @if (editUserId == user.id) {
                                <input type="palavraPasse" @bind = "user.palavraPasse" />
                            } else {
                                @user.palavraPasse
                            }
                        </td>
                        <td>
                            @if (editUserId == user.id) {
                                <button @onclick="() => SaveUser(user)">Save</button>
                                <button @onclick="CancelEdit">Cancel</button>
                            } else {
                                <button @onclick="() => EditUser(user.id)">Edit</button>
                                <button @onclick="() => DeleteUser(user.id)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    } else {
        <p>No users found.</p>
    }
</div>

@code {
    private List<Utilizador> users = new();
    private Utilizador newUser = Utilizador.empty();
    private int? editUserId = null;
    private string? error = null;
    private JSConsole console;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            console = new(js);
            await console.log("Hello", "World", new { Key = "Value" }, 42);
        }
    }


    protected override async Task OnInitializedAsync() {
        await LoadUsers();

        // var user = new Utilizador("def", "a@b.c", "123");
        // Console.WriteLine("USER: " + user.ToString());
        // int id = await UtilizadorDAO.AddAsync(user);
        // Console.WriteLine("RES: " + id);
    }

    private async Task LoadUsers() {
        Console.WriteLine("LOAD USERS");
        users = (await UtilizadorDAO.GetAllAsync()).ToList();
    }

    private async Task AddUser() {
        error = null;
        Console.WriteLine("AU USER: " + newUser);

        if (
            string.IsNullOrWhiteSpace(newUser.username) 
            || string.IsNullOrWhiteSpace(newUser.email) 
            || string.IsNullOrWhiteSpace(newUser.palavraPasse)
        ) {
            error = "One or more fields are null.";
            return;
        }

        Console.WriteLine("AU USER AFTER: ", newUser);

        try {
            await UtilizadorDAO.AddAsync(newUser);
        } catch (Exception e) {
            error = e.Message;
            await console.error("AU ERROR:", e.Message, e.Source);

            return;
        }

        newUser = Utilizador.empty(); // Reset form
        await LoadUsers();
    }

    private void EditUser(int userId) {
        editUserId = userId;
    }

    private async Task SaveUser(Utilizador user) {
        if (editUserId == null) return;

        await UtilizadorDAO.UpdateAsync(user);
        editUserId = null;
        await LoadUsers();
    }

    private void CancelEdit() {
        editUserId = null;
    }

    private async Task DeleteUser(int userId) {
        await UtilizadorDAO.DeleteAsync(userId);
        await LoadUsers();
    }
}