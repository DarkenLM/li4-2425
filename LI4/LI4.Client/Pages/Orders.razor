@page "/orders"
@rendermode InteractiveServer
@inject IMineBuildsLN facade;
@inject NavigationManager NavigationManager
@inject IJSRuntime js;

@using Util;

@{
    int i = 1;
}
<div class="mc-container" style="margin: 10px;">
    <div class="title">
        Orders
        <button class="close" @onclick="goTheFuckBack">X</button>
    </div>
    <div class="main-container">
        <div class="content-wrapper">
            <div class="overflow-container mc-scrollbar">
                <div class="overflow-content">
                    @if (orders == null) {
                        <p>A carregar encomendas...</p>
                    } else if (!orders.Any()) {
                        <p>Não há encomendas.</p>
                    } else {
                        @foreach (var order in orders)
                        {
                            <a class="mc-slot long-slot orders-slot" href="order/@order.id">
                                <div class="icon">
                                    <img src="/img/pictures/cardboard_box.png" alt="Order">
                                </div>
                                <div class="content-1c-2r">
                                    <div class="mc-text-align">Order #@i</div>
                                    <div class="content-2c-1r">
                                        <div class="orders-progress-bar">
                                            @if (!order.delivered)
                                            {
                                                <img src="/img/hourglass.png" alt="hourglass">
                                                <p class="mc-text-align">Time Left: - @(StringUtil.formatTimeSpan(orderTimes[order.id]))</p>
                                            }
                                            else
                                            {
                                                <img src="/img/mc_accept.png" alt="hourglass">
                                                <p class="mc-text-align">@(StringUtil.formatTime(order.orderDate))</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </a>
                            i++;
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<LI4.Dados.Order> orders = new();
    private Dictionary<string, int>? selectedOrderBlocks = null;
    private Dictionary<int, long> orderTimes = new();
    private string errorMsg = "";

    // protected override async Task OnInitializedAsync() {
    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;

        int id;
        try {
            // var user = await facade.getUserByEmailAsync("paulo@example.com");
            string userAuth = await CookieUtil.getUserAuth(js);
            var user = await facade.getUserByEmailAsync(userAuth);

            if (user != null) {
                id = user.id;
            } else {
                throw null;
            }

            orders = await facade.getUserOrdersAsync(id);
            if (orders.Count == 0) {
                errorMsg = "Não há encomendas.";
                throw null;
            }

            // var blocks = facade.getAllBlockProperties();

            // foreach (var order in orders) {
            //     if (!order.delivered) {
            //         var orderContent = await facade.getOrderContentAsync(order.id);
            //         if (orderContent is null) continue;

            //         int estimatedTime = 0;
            //         foreach (var block in orderContent) {
            //             estimatedTime += block.Value * blocks[block.Key].timeToAcquire;
            //         }

            //         long _et = (StringUtil.convertToUnixTimestamp(order.orderDate) + estimatedTime * 1000) - DateTimeOffset.Now.ToUnixTimeSeconds();
            //         orderTimes[order.id] = _et;
            //     } else {
            //         orderTimes[order.id] = 0;
            //     }
            // }
            foreach (var order in orders){
                orderTimes[order.id] = await facade.getEstimatedTimeOrderAsync(order.id);
            }

            var orderTimesUpdateTimer = new Timer(new TimerCallback(_ =>{
                foreach (var orderTimer in orderTimes.Keys.ToList()) {
                    orderTimes[orderTimer]--;

                    if (orderTimes[orderTimer] <= 0){
                        var order = orders.FirstOrDefault(o => o.id == orderTimer);
                        if (order != null){
                            order.delivered = true; 
                        }
                        orderTimes.Remove(orderTimer);
                    }
                }

                InvokeAsync(StateHasChanged); // Update the UI
            }), null, 1000, 1000);

            await InvokeAsync(StateHasChanged);
        } catch (Exception _) {
            errorMsg = "Unknown error occured while fetching orders.";
        }
    }

    private void goTheFuckBack() {
        NavigationManager.NavigateTo("/stock");
    } 
}
