@page "/order/{order:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IMineBuildsLN facade;
@inject IJSRuntime js
@using LI4.Common.Dados;
@using LI4.Common.Exceptions.ConstructionExceptions;
@using LI4.Dados;
@using Util;

<div class="mc-container" style="margin: 10px;">
    <div class="title">
        Order <span style="color: #008600;">#@order</span>
        <button class="close" @onclick="goTheFuckBack">X</button>
    </div>
    @if (orderStruct is null) {
        <p>Unknown order</p>
    } else if (errorMsg != null) {
        <p style="color: var(--error);">@errorMsg</p>
    } else {
        <div class="main-container" style="height: 70vh;">
            <div class="content-wrapper">
                <div class="overflow-container mc-scrollbar">
                    <div class="overflow-content">
                        <div class="stock">
                            @foreach (var block in orderContent) {
                                BlockProperties bp = facade.getBlockProperties(block.Key);
                                string name = bp.name;

                                <div class="mc-slot stock-slot">
                                    <div class="mc-item">
                                        <div class="icon"><img src="img/pictures/@(StringUtil.reverseInterpolateBlockName(name)).png" alt="@name"></div>
                                        <div class="stock-item-name">@name</div>
                                        <div class="mc-item-count">@(block.Value)</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="secondary-container stock">
            <div class="orders-progress-bar">
                @if (orderStruct.delivered) {
                    <img src="/img/mc_accept.png" alt="hourglass">
                    <p class="mc-text-align">@(StringUtil.formatTime(orderStruct.orderDate))</p>
                } else {
                    <img src="../img/hourglass.png" alt="hourglass">
                    <p class="mc-text-align">@(StringUtil.formatTimeSpan(_et))</p>
                }
                <!-- #region ======= PENDING ORDER ======= -->
                <!-- <img src="../img/hourglass.png" alt="hourglass">
                <p class="mc-text-align">10h 09m 08s</p> -->
                <!-- #endregion ======= PENDING ORDER ======= -->

                <!-- #region ======= FINISHED ORDER ======= -->
                @* <img src="/img/mc_accept.png" alt="hourglass">
                <p class="mc-text-align">24/01/2025 15:43:12</p> *@
                <!-- #endregion ======= FINISHED ORDER ======= -->
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int order { get; set; }

    // private Dictionary<int, BlockProperties> blocks;
    private LI4.Dados.Order? orderStruct = null;
    private Dictionary<int, int> orderContent;
    private int estimatedTime = 0;
    private long _et = 0;

    private string? errorMsg;

    protected override async Task OnInitializedAsync() {
        Console.WriteLine("ORDER ID: " + order);

        orderStruct = await facade.getOrderAsync(order);
        Console.WriteLine("ORDER STRUCT: " + orderStruct);

        if (orderStruct == null) {
            return;
        }

        orderContent = await facade.getOrderContentAsync(order);
        if (orderContent.Count == 0) {
            errorMsg = "Empty order.";

            await InvokeAsync(StateHasChanged);
            return;
        }

        // Console.WriteLine("BLOCKS: \n");
        // foreach (var block in blocks) {
        //     Console.WriteLine("- " + block.ToString());
        // }

        // foreach (var block in orderContent) {
        //     estimatedTime += block.Value * blocks[block.Key].timeToAcquire;
        // }

        // Console.WriteLine("ORDER DATE 2:" + orderStruct!.orderDate + " | " + StringUtil.convertToUnixTimestamp(orderStruct!.orderDate));
        // Console.WriteLine("ESTIMATED TIME 2:" + estimatedTime * 1000);
        // Console.WriteLine("NOW 2:" + DateTime.Now + " | " + DateTimeOffset.Now.ToUnixTimeSeconds());


        // _et = (StringUtil.convertToUnixTimestamp(orderStruct!.orderDate) + estimatedTime * 1000) - DateTimeOffset.Now.ToUnixTimeSeconds();

        _et = await facade.getEstimatedTimeOrderAsync(order);
        Timer? orderTimeUpdateTimer = null;
        orderTimeUpdateTimer = new Timer(new TimerCallback(_ => {
                _et--;
                if (_et == 0) {
                    orderStruct.delivered = true;
                    orderTimeUpdateTimer!.Change(Timeout.Infinite, Timeout.Infinite);
                }

                InvokeAsync(StateHasChanged);
            }), null, 1000, 1000);

        await InvokeAsync(StateHasChanged);
    }

    private void goTheFuckBack() {
        NavigationManager.NavigateTo("/orders");
    } 
}
