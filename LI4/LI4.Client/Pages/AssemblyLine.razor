@page "/assembly_line/{construction:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IMineBuildsLN facade;
@inject IJSRuntime js
@using LI4.Common.Dados;
@using LI4.Common.Exceptions.ConstructionExceptions;
@using LI4.Dados;
@using Util;

<div class="mc-container" style="margin: 10px;">
    <div class="title">
        Assembly Line: <span style="color: #008600;">@(facade.getConstructionProperties(construction).name)</span>
        <button class="close" @onclick="goTheFuckBack">X</button>
    </div>
    @if (message is not null) {
        <p>@message</p>
    } else if (constructions is null) {
        <p>Loading...</p>
    } else if (constructions.Count == 0) {
        <p>Assembly line is empty.</p>
    } else {
        <div class="main-container">
            <div class="content-wrapper">
                <div class="overflow-container mc-scrollbar">
                    <div class="overflow-content">
                        @{var constructionProperties = facade.getConstructionProperties(construction);}
                        @foreach (var constr in constructions) {
                            var stage = getStage(constr, userId, construction);
                            int time = 0;
                            if (stage >= 0){
                                time = constructionTimes[constr];
                            }
                            else {
                                stage = constructionProperties.nStages;
                            }

                            <a class="mc-slot long-slot assline-slot" href="/assembly_line/@constr/construction">
                                <div class="icon">
                                    <img src="/img/pictures/@(StringUtil.reverseInterpolateBlockName(constructionProperties.name)).png" alt="@(constructionProperties.name)">
                                </div>
                                <div class="content-1c-2r">
                                    <div class="mc-text-align">#@(constr) - @(constructionProperties.name)</div>
                                    <div class="content-2c-1r">
                                        <div class="assline-progress-bar">
                                            <div class="mc-progress-bar" style="background-image: url('/img/green_background.png'); --width: 480px; --progress: @(stage == constructionProperties.nStages ? 100 : (stage / (double)constructionProperties.nStages * 100))%">
                                                <div class="mc-progress-bar-fill" style="background-image: url('/img/green_progress.png');"></div>
                                            </div>
                                            <p class="mc-text-align">@(stage == constructionProperties.nStages ? "100%" : (stage / (double)constructionProperties.nStages * 100).ToString("F0") + "%")</p>
                                        </div>
                                        <div class="assline-progress-left">
                                            <img src="/img/hourglass.png" alt="hourglass">
                                            <p class="mc-text-align">Time Left: @(StringUtil.formatTimeSpan(@time))</p>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script type="module" src="/js/pages/construction.js"></script>

@code {
    [Parameter] public int construction { get; set; }

    private int userId;
    private List<int>? constructions;
    private Dictionary<int, int> constructionTimes = new();

    private string? message;

    // protected override async Task OnInitializedAsync() {
    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;

        try
        {
            // var user = await facade.getUserByEmailAsync("paulo@example.com");
            string userAuth = await CookieUtil.getUserAuth(js);
            var user = await facade.getUserByEmailAsync(userAuth);

            if (user == null)
            {
                message = "Unknown error. (No Users)";

                await InvokeAsync(StateHasChanged);
                return;
            }

            userId = user.id;
            constructions = await facade.getBuildingIdsConstructionsAsync(userId, construction);

            foreach (var constr in constructions)
            {
                var stage = getStage(constr, userId, construction);
                if(stage==-1){
                    continue;
                }
                constructionTimes[constr] = facade.getEstimatedTime(userId, construction, stage);
            }

            var orderTimesUpdateTimer = new Timer(new TimerCallback(async _ =>
            {
                foreach (var timer in constructionTimes.ToList())
                {
                    if (constructionTimes[timer.Key] > 0){
                        var stage = getStage(timer.Key, userId, construction);
                        if (stage == -1){
                            constructionTimes[timer.Key] = 0;
                        } else {
                            constructionTimes[timer.Key] = facade.getEstimatedTime(userId, construction, stage);
                        }
                    }

                    if (constructionTimes[timer.Key] == 0)
                    {
                        constructions = await facade.getBuildingIdsConstructionsAsync(userId, construction);
                        foreach (var constr in constructions)
                        {
                            if (constructionTimes.ContainsKey(constr)) continue;

                            var stage = getStage(constr, userId, construction);
                            if (stage == -1)
                            {
                                continue;
                            }
                            constructionTimes[constr] = facade.getEstimatedTime(userId, construction, stage);
                        }
                        continue;
                    }
                }

                await InvokeAsync(StateHasChanged);
            }), null, 1000, 1000);

            await InvokeAsync(StateHasChanged);
        } catch (Exception ex) {
            message = "Unknown error: " + ex.Message;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<List<int>> getBuildingsAysnc(){
        return await facade.getBuildingIdsConstructionsAsync(userId, construction);
    }

    private string getEstimatedTime(int idUser, int idConstructionProperties, int stage){
        int seconds = facade.getEstimatedTime(idUser, idConstructionProperties, stage);
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    private int getStage(int idConstruction, int idUser, int idConstructionProperties){
        try {
            return facade.getConstructionCurrentStage(idConstruction, idUser, idConstructionProperties);
        } catch(Exception ex) {
            return -1;
        }
        return 0;
    }

    private void goTheFuckBack() {
        NavigationManager.NavigateTo("/assembly_lines");
    } 
}
