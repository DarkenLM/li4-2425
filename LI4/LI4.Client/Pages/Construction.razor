@page "/{source}/construction/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IMineBuildsLN facade;
@inject IJSRuntime js

@using Util;
@using Common.Dados;


<h3>Construction Details</h3>

<div>
    @if (blocksForConstruction != null)
    {
        <p><strong>Construction Name:</strong> @constructionProperties.name</p>
        <p><strong>Difficulty:</strong> @constructionProperties.dificulty</p>
        <p><strong>Stages:</strong> @constructionProperties.nStages</p>

        <div>
            @if(source == "catalog"){
                <div style="width: 200px; height: 150px; overflow-y: scroll; border: 1px solid black; padding: 10px;">
                    @for (int index = 0; index < blocksForConstruction.Count; index++)
                    {
                        var item = blocksForConstruction.ElementAt(index);
                        var itemKey = item.Key;
                        var itemValue = item.Value;

                        <div style="margin-bottom: 10px; border: 1px solid gray; padding: 5px;">
                            <strong>Block Name:</strong> @itemKey <br />
                            <strong>Block Quantity:</strong> @itemValue
                        </div>
                    }
                </div>

                <input type="number" style="width: 100px; padding: 5px; margin-right: 10px;" @bind="currentNumber" @oninput="validateInput"/>
                <button @onclick="addConstruction">+</button>

                <button @onclick="NavigateToCatalog">back</button>
            }
            @if(source == "assemblyLine"){
                <p><strong>Stage:</strong> @getStage(id, 3, idp)</p>

                <div style="width: 200px; height: 150px; overflow-y: scroll; border: 1px solid black; padding: 10px;">
                    @for (int index = 0; index < blocksForConstruction.Count; index++)
                    {
                        var item = blocksForConstruction.ElementAt(index);
                        var itemKey = item.Key;
                        var itemValue = item.Value;

                        <div style="margin-bottom: 10px; border: 1px solid gray; padding: 5px;">
                            <strong>Block Name:</strong> @itemKey <br />
                            <strong>Block Quantity:</strong> @itemValue
                        </div>
                    }
                </div>

                <button @onclick="NavigateToAssemblyLine">back</button>
            }
            @if(source == "completedConstructions"){
                <div style="width: 200px; height: 150px; overflow-y: scroll; border: 1px solid black; padding: 10px;">
                    @for (int index = 0; index < blocksForConstruction.Count; index++)
                    {
                        var item = blocksForConstruction.ElementAt(index);
                        var itemKey = item.Key;
                        var itemValue = item.Value;

                        <div style="margin-bottom: 10px; border: 1px solid gray; padding: 5px;">
                            <strong>Block Name:</strong> @itemKey <br />
                            <strong>Block Quantity:</strong> @itemValue
                        </div>
                    }
                </div>

                <p>@($"{completed}/{total} constructions")</p>

                <button @onclick="NavigateToCompletedConstructions">back</button>
            }
        </div>
    }
    else
    {
        <p>Loading construction details...</p>
    }
</div>


<p>@message</p>

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string source { get; set; }
    private ConstructionProperties? constructionProperties;
    private Dictionary<string, int>? blocksForConstruction;
    private string message = string.Empty;

    private int currentNumber = 0;

    private int total = 0;
    private int completed = 0;

    private int idp = 0; // idConstructionProperties


    protected override async Task OnInitializedAsync(){

        if(source == "catalog" || source == "completedConstructions"){ // id : idConstructionProperties
            blocksForConstruction = await facade.getAllBlocksConstructionAsync(id);
            constructionProperties = facade.getConstructionProperties(id);
        }
        if(source == "completedConstructions"){
            total = await totalConstructions();
            completed = await numCompletedConstructions();
        }
        if(source == "assemblyLine"){ // id : id of construction
            idp = await facade.getConstructionPropertyIdAsync(id);
			blocksForConstruction = await facade.getAllBlocksConstructionAsync(idp);
            constructionProperties = facade.getConstructionProperties(idp);
        }
    }  

    #region//---- CATALOG METHODS ----//

    private async Task validateInput(ChangeEventArgs e){

        if (int.TryParse(e.Value.ToString(), out int inputNumber)){

            if (inputNumber >= 0){
                bool hasStock;

                while(inputNumber > currentNumber){
                    hasStock = await facade.hasStockAsync(3,id);
                    if(hasStock){
                        currentNumber++;
                        await facade.addConstructionToQueueAsync(3, id);
                    }
                    else{
                        message = "Cannot add more. User does not have enough stock.";
                        break;
                    }
                }
            }
            else{
                message = "Quantity cannot be negative.";
                currentNumber = 0;
            }
        }
        else{
            message = "Invalid input. Please enter a valid number.";
            currentNumber = 0;
        }
    }

    private async Task addConstruction(){

        bool hasStock = await facade.hasStockAsync(3,id);
        if(hasStock){
            currentNumber++;
            await facade.addConstructionToQueueAsync(3, id);
        }
        else{
            message = "Cannot add more. User does not have enough stock.";
        }
    }

    private void NavigateToCatalog(){
        NavigationManager.NavigateTo("/constructions/catalog");
    }

    #endregion

    #region//---- ASSEMBLY LINE METHODS ----//

    private int getStage(int idConstruction, int idUser, int idConstructionProperties){
        try{
            return facade.getConstructionCurrentStage(idConstruction, idUser, idConstructionProperties);
        }
        catch(Exception ex){
            message = $"{ex.Message}";
        }

        return 0;
    }

	private void NavigateToAssemblyLine(){
        NavigationManager.NavigateTo($"/constructions/assemblyLine/{idp}");
    }

    #endregion

    #region//---- COMPLETED CONSTRUCTIONS METHODS ----//

    private async Task<int> numCompletedConstructions(){
        Dictionary<int, int> completed = await facade.getCompletedConstructionsAsync(3);
		int completedCount = completed.TryGetValue(id, out int completedValue) ? completedValue : 0;
        return completedCount;
    }

    private async Task<int> numOfnonCompletedConstructions(){
        Dictionary<int, int> awaiting = await facade.getAwaitingConstructionsAsync(3);
        Dictionary<int, int> building = await facade.getBuildingConstructionsAsync(3);
        int awaitingCount = awaiting.TryGetValue(id, out int awaitingValue) ? awaitingValue : 0;
        int buildingCount = building.TryGetValue(id, out int buildingValue) ? buildingValue : 0;

        return awaitingCount + buildingCount;
    }

    private async Task<int> totalConstructions(){
        int a = await numOfnonCompletedConstructions();
        int b = await numCompletedConstructions();
        int result = a + b;

        return result;
    }

	private void NavigateToCompletedConstructions(){
        NavigationManager.NavigateTo("/constructions/completedConstructions");
    }

	#endregion
}
